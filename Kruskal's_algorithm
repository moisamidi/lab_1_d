"""Kruskal's_algorithm"""
import timeit
from networkx.algorithms import tree
import random
import networkx as nx
import matplotlib.pyplot as plt
from itertools import combinations, groupby

# You can use this function to generate a random graph with 'num_of_nodes' nodes
# and 'completeness' probability of an edge between any two nodes
# If 'directed' is True, the graph will be directed
# If 'draw' is True, the graph will be drawn
def gnp_random_connected_graph(num_of_nodes: int,
                               completeness: int,
                               directed: bool = False,
                               draw: bool = False):
    """
    Generates a random graph, similarly to an Erdős-Rényi 
    graph, but enforcing that the resulting graph is conneted (in case of undirected graphs)
    """

    
    if directed:
        G = nx.DiGraph()
    else:
        G = nx.Graph()
    edges = combinations(range(num_of_nodes), 2)
    G.add_nodes_from(range(num_of_nodes))
    
    for _, node_edges in groupby(edges, key = lambda x: x[0]):
        node_edges = list(node_edges)
        random_edge = random.choice(node_edges)
        if random.random() < 0.5:
            random_edge = random_edge[::-1]
        G.add_edge(*random_edge)
        for e in node_edges:
            if random.random() < completeness:
                G.add_edge(*e)
                
    for (u,v,w) in G.edges(data=True):
        w['weight'] = random.randint(-5, 20)
                
    if draw: 
        plt.figure(figsize=(10,6))
        if directed:
            # draw with edge weights
            pos = nx.arf_layout(G)
            nx.draw(G,pos, node_color='lightblue', 
                    with_labels=True,
                    node_size=500, 
                    arrowsize=20, 
                    arrows=True)
            labels = nx.get_edge_attributes(G,'weight')
            nx.draw_networkx_edge_labels(G, pos,edge_labels=labels)
            
        else:
            nx.draw(G, node_color='lightblue', 
                with_labels=True, 
                node_size=500)
        
    return G

def kruskal(edges):
    min_way = []
#Сортую ребра за іхньою вагою, за допомогою довжини
    components = [i for i in range(len(edges))]
    edges = sorted(edges, key = lambda edge: edge[2]['weight'])
#Перевіряю чи немає циклу в графі
    for edge in edges:
        ver_1, ver_2, inform = edge
        weight = inform['weight']
        if components[ver_1] != components[ver_2]: #Множина вершин, що створюють новий підграф і не утворюють цикл
            min_way.append(edge)
            last = components[ver_1]
            next = components[ver_2]
            for i in range(len(components)):
                if components[i] == last:
                    components[i] = next
#Повертаю мінімальний варінт обходу графа                    
    return min_way

#Роблю перевірку графа, чи працює правильно, звіряючи з вбудованим графом
grph = gnp_random_connected_graph(10, 1, False, True)
edges = grph.edges(data=True)
print(edges)
print()
check = tree.minimum_spanning_tree(grph, algorithm='kruskal')
print(sorted(check.edges(data=True), key = lambda x: x[2]['weight']))
print()
print(kruskal(edges))
print(timeit.timeit())
